/*
	тут все приколы добавим (^^)

	1) библа для динам ввода(Numbers/Strings)
	2) библа для обновленного pointer(с динам. позициями + счиатем с начала)
	3) [Esc] вместо [Exit] (Просто подсказака)
	4) предложение обучения при первом заходе ( [Yes]   [No] )
	тут все)

	дальше план по менюшкам
	
	по поводу пална реализации:
	1) динамический ввод
	2) new_pointer_lib
	3) классы для:
		1] логин + регистрация 
		2] хэштирование(md5)
		3] мэйн логика(класс [Employee] )
	4) переход между менюшками(туда же енамы и все приколы)
    5) концепция Node(сотрудника)
        
    (ID: XXXXXX)                                    // генерится рандомно
        [Ввод] (Имя)
        [Ввод] (Фамилия)
        [Ввод] (Отчество)
        [Ввод] (З/П)
        [Ввод] (дата начала работы)                 // как варки добавить дату зачисления и подводить итоги за: месяц, квартал, год, все время

//--иерархия меню:
	
     1ур./Главное/
        [Войти]
        [Регистарция]
        [Методичка для чайников]
        [Выход]                                     // оасталю на всякий 
                                                    // ВАЖНО!!! во всех след убираем [Exit] заменяя на обработку [Ecs]
    Press [Ecs] to exit

    2ур./Главное/Вход/
        [Ввод](Логин)
        [Ввод](Пароль)
        [Показать пароль]
        [Войти] --> 3ур.(User|Admin)
        
    2.1ур./Главное/Регистрация/
        [Ввод](Логин)
        [Ввод](Пароль)
        [Ввод](Подтвердить пароль)
        [Показать пароль]
        [Зарегестрировать] --> 1ур.
        
    3ур./Главное/Основная логика(U|A)/
        [Вывод сотрудников] --> 3.1ур.              // тут же подсчет вкладов
        [Поиск сотрудника] --> 3.2ур.
        [Сортировка по параметру] --> 3.3ур.
        <Admin roots>[>>]                           // тут реализую приколюшку с открыванием
            [Добавление]
            [Удаление]
            [Изменение]
            [Пользователи]                          // система удаление/бана/возможно добавлю пункт повышения должности до Админа
        
+-------------------------------------------+
    
    3.1урю/Главное/Основная/Вывод/
    (ID:XXXXXX)
        [Имя]       Ну
        [Фамилия]   ладно
        [З/П]            1350р.  
        [Дата зачисленя] 25.03.2022
    (ID:XXXXXX)
        ...


    3.2ур./Главное/Основное/Поиск
        [Ввод](Имя)
        [Ввод](Фамилия)
     -->[Ввод](З/П)
        [Ввод](Дата зачисления)                       // хх.хх.хххх
    +--------------------------------+
    (ID:XXXXXX)
        [Имя] Abcde
        [Фамилия]
        [Дата зачисления]
        [З/П]
    (ID:XXXXXX)
        ...

    3.3ур./Главное/Основное/Сортировка
        [ ](Имя)
        [ ](Фамилия)
     -->[*](Дата зачисления)                        // исключительно 1 парметр(создасться временная копия)
        [ ](З/П)
        [Отсортировать]
    +--------------------------------+
    (ID:XXXXXX)
        [Имя] Abcde
        [Фамилия]
        [Дата зачисления]
        [З/П]
    (ID:XXXXXX)


    4.1ур./Главное/Основное/<Admin>/Добаваить/
        [Ввод](Имя)
        [Ввод](Фамилия)
        [Ввод](Дата зачисления)                       // хх.хх.хххх
     -->[Ввод](З/П)
        [Добавить]

    4.2ур./Главное/Основное/<Admin>/Удалить/
        [Удалить]
        [ ](ID:XXXXXX)
     -->[*](ID:XXXXXX)
        [*](ID:XXXXXX)
        ...

    4.3ур./Главное/Основное/<Admin>/Изменить/
        [Изменить] --> 4.3.1
        [ ](ID:XXXXXX)
     -->[*](ID:XXXXXX)                              // также 1 за раз
        [ ](ID:XXXXXX)
        ...

        //                                  А ЗАЧЕМ??? просто менять , а то что не менял остается (Гений)
    4.3.1ур. <Choose Change Param>
    (ID:XXXXXX)
        [*](Имя)
        [*](Фамилия)
        [ ](Дата зачисления)
     -->[ ](З/П)
        [Change] --> 4.3.2
        

    4.3.2ур. <Chossing>
        (Имя)       Old --> New
        (Фамилия)   Old --> New
     -->[Save Change's]                                                     // ИДЕЯ! подсказка: Press [S] to save(проблема с автовводом...)

        

    4.4ур. <Users>
    <Admin>
        [ID:000000 | Login :XXXXXX | Pass: XXXXXX | Role:0]
    (Users)
        [ID:XXXXXX | Login: Abc    | Pass: Abc123 | Role:1][<<]
            [ChangeRole][>>]
                [*][Ban](Massage): Shut Up                                   // choose_active --> input_active
                [ ][UpRole]
                [Save]
        [ID:XXXXXX | Login: Abcd   | Pass: Abd123 | Role:1][>>]
        [ID:XXXXXX | Login: Abcde  | Pass: Abe123 | Role:1][>>]




        ТАкс...
        теперь тз по поводу дней
        и того механики:

        1) динамический ввод                                // косяк с раскладкой...
        2) new_pointer_lib                                  // +
        3) вход + регистрация                               /  coming soon...
        4) хэштрование
        5) мэйно логика
            1 - класс с полями
            2 - промотр/поиск/сортировка
        6) админ логика
            1 - добавление/удалеие
            2 - изменение нодов
            3 - упарвление аккаунтами
        7) запись в файл(попробую автозапись...)
        8) обучение (аниации + предолжение при 1м заходе)
*/

/*
    Поговрим об ограничениях...

    Логин - 4-13 символов(латиница + числа) без СС без кириллицы онли d+l или что-то одно
    Пароль - 4-13 также, но тут + СС, также обязательное наличие 1б+1ц+1сс 

*/

/*
    Поговрим о тз для поезда(чтобы я знал че как робить без гпт ваших)
    мэйн логика:
    [Вывод сотрудников] --> 3.1ур.              // тут же подсчет вкладов
    [Поиск сотрудника] --> 3.2ур.
    [Сортировка по параметру] --> 3.3ур.
    <Admin roots>[>>]                           // тут реализую приколюшку с открыванием
        [Добавление]
        [Удаление]
        [Изменение]
        [Пользователи]
        
    нужен класс... и ханах... и ПАША!!!
//----------------------------------------------//
    double bid;                                 // базовая ставка З/П
    
    enum SalaryExpenses {                       // Енамы для времени поиска(квартал - 2.5 месяца)
        Week = 4,
        Month = 3,
        Quarter = 2,
        Year = 1,
        AllTime = 0
    };
    
    class Emplyee {
    private:
        int ID_employee;                        // уникальный ID (та же функция)
        string name_employee;                   // просто строка (онли буквы)
        string surname_employee;                // просто строка... (буквы + '-' для сложных фамилий)
        string date_of_start;                   // строка(лабу потерял с виндой...) хх.хх.хххх (10 символоа, 8 цифер, 2 точки + проверка на ликвидность)
        double salary_ratio;                    // положительный double(лимиты тоже будут(можно через баз. ставку, а тут коэффициент))
    };
    геттеры дэфолт
    функция вывода
    сортировка(тут без копии только навсегда!!!)
    запись в файл(формат как и аккаунты)
    функция поиска по параметру(дэфолт, но с выводом посмотрим(в режиме реального))

    сеттеры дэфолт                              // доступны только для админа !!!
    изменение                                   // доступны только для админа !!!
    добавить/удалить                            // доступны только для админа !!!

    vector<Employee> vec_employee;              // вектор для хранения

    double CalculateCostsByTime(
    SalaryExpenses current_time_choose) {       // подсчет затрат за время
        double expenses = 0;
        switch(current_time_choose) {           // тут считаем и возвращаем
        
        }
        return expenses;
    }


    тажке аккаунт мэнэджмент для адимна
    
    анимции

    + записка
    и сдаем
        
*/

#include <iostream>
#include <string>
#include <sstream>                                          //
#include <iomanip>
#include <random>
#include <fstream>

#include <colors.h>
#include <vector_re.h>
#include "DynamicInput.h"
#include "PointerNew.h"
#include "GLOBALS.h"

#include "AccountManager.h"
#include "AccountRepository.h"

#include "EmployeeRepository.h"

#include "MenuLogic.h"
#include "DisplayingMenu.h"

using namespace std;

int main() {
    ConsoleInput::SetConsole();
    AccountRepository::LoadAccountsFromFile();
    EmployeeRepository::LoadFromFile();
    RunningMenuLogic();
    return 0;
}